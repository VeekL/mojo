/*
   This file was generated automatically by the Mojo IDE version B1.3.6.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module mojo_top_0 (
    input clk,
    input rst_n,
    output reg [7:0] led,
    input cclk,
    output reg spi_miso,
    input spi_ss,
    input spi_mosi,
    input spi_sck,
    output reg [3:0] spi_channel,
    input avr_tx,
    output reg avr_rx,
    input avr_rx_busy,
    output reg [23:0] io_led,
    output reg [7:0] io_seg,
    output reg [3:0] io_sel,
    input [4:0] io_button,
    input [23:0] io_dip,
    output reg io_1,
    output reg io_2,
    output reg io_3,
    input io_4,
    input io_5
  );
  
  
  
  reg rst;
  
  wire [1-1:0] M_reset_cond_out;
  reg [1-1:0] M_reset_cond_in;
  reset_conditioner_1 reset_cond (
    .clk(clk),
    .in(M_reset_cond_in),
    .out(M_reset_cond_out)
  );
  wire [1-1:0] M_edge_detector_out;
  reg [1-1:0] M_edge_detector_in;
  edge_detector_2 edge_detector (
    .clk(clk),
    .in(M_edge_detector_in),
    .out(M_edge_detector_out)
  );
  wire [7-1:0] M_seg_seg;
  wire [4-1:0] M_seg_sel;
  reg [16-1:0] M_seg_values;
  multi_seven_seg_3 seg (
    .clk(clk),
    .rst(rst),
    .values(M_seg_values),
    .seg(M_seg_seg),
    .sel(M_seg_sel)
  );
  wire [16-1:0] M_dec_ctr_digits;
  reg [1-1:0] M_dec_ctr_inc;
  multi_dec_ctr_4 dec_ctr (
    .clk(clk),
    .rst(rst),
    .inc(M_dec_ctr_inc),
    .digits(M_dec_ctr_digits)
  );
  wire [1-1:0] M_ctr_value;
  counter_5 ctr (
    .clk(clk),
    .rst(rst),
    .value(M_ctr_value)
  );
  wire [1-1:0] M_state_out;
  wire [1-1:0] M_state_carryOut;
  wire [1-1:0] M_state_sumOut;
  reg [1-1:0] M_state_inputA;
  reg [1-1:0] M_state_inputB;
  reg [1-1:0] M_state_carryin;
  test_fsm_refactor_6 state (
    .clk(clk),
    .rst(rst),
    .inputA(M_state_inputA),
    .inputB(M_state_inputB),
    .carryin(M_state_carryin),
    .out(M_state_out),
    .carryOut(M_state_carryOut),
    .sumOut(M_state_sumOut)
  );
  wire [1-1:0] M_clock_out;
  wire [1-1:0] M_clock_carryOut;
  wire [1-1:0] M_clock_sumOut;
  wire [1-1:0] M_clock_p1;
  wire [1-1:0] M_clock_p2;
  wire [1-1:0] M_clock_p3;
  wire [7-1:0] M_clock_seg;
  wire [4-1:0] M_clock_sel;
  wire [8-1:0] M_clock_io_led;
  reg [1-1:0] M_clock_input1;
  reg [1-1:0] M_clock_input2;
  test_auto_clock_7 clock (
    .clk(clk),
    .rst(rst),
    .input1(M_clock_input1),
    .input2(M_clock_input2),
    .out(M_clock_out),
    .carryOut(M_clock_carryOut),
    .sumOut(M_clock_sumOut),
    .p1(M_clock_p1),
    .p2(M_clock_p2),
    .p3(M_clock_p3),
    .seg(M_clock_seg),
    .sel(M_clock_sel),
    .io_led(M_clock_io_led)
  );
  
  wire [1-1:0] M_inputtester_out;
  wire [1-1:0] M_inputtester_result;
  reg [1-1:0] M_inputtester_inputA1;
  reg [1-1:0] M_inputtester_inputA2;
  reg [1-1:0] M_inputtester_inputB1;
  reg [1-1:0] M_inputtester_inputB2;
  test_input_8 inputtester (
    .inputA1(M_inputtester_inputA1),
    .inputA2(M_inputtester_inputA2),
    .inputB1(M_inputtester_inputB1),
    .inputB2(M_inputtester_inputB2),
    .out(M_inputtester_out),
    .result(M_inputtester_result)
  );
  
  always @* begin
    M_reset_cond_in = ~rst_n;
    rst = M_reset_cond_out;
    led = {3'h1, io_button};
    spi_miso = 1'bz;
    spi_channel = 4'bzzzz;
    avr_rx = 1'bz;
    io_seg = 8'hff;
    io_sel = 4'h0;
    M_edge_detector_in = M_ctr_value;
    M_dec_ctr_inc = M_edge_detector_out;
    M_seg_values = M_dec_ctr_digits;
    io_seg = ~M_clock_seg;
    io_sel = ~M_clock_sel;
    io_led = 24'h000000;
    M_state_inputA = io_dip[0+0+0-:1];
    M_state_inputB = io_dip[0+1+0-:1];
    M_state_carryin = io_dip[0+2+0-:1];
    io_led[16+6+0-:1] = M_state_carryOut;
    io_led[16+7+0-:1] = M_state_sumOut;
    io_led[8+0+0-:1] = M_clock_sumOut;
    io_led[8+1+0-:1] = M_clock_carryOut;
    io_1 = M_clock_p1;
    io_2 = M_clock_p2;
    io_3 = M_clock_p3;
    M_inputtester_inputB1 = io_4;
    M_inputtester_inputA1 = io_5;
    M_inputtester_inputA2 = M_clock_sumOut;
    M_inputtester_inputB2 = M_clock_carryOut;
    io_led[0+7+0-:1] = M_inputtester_result;
    io_led[16+7-:8] = M_clock_io_led;
    M_clock_input1 = io_4;
    M_clock_input2 = io_5;
  end
endmodule
