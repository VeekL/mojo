/*
   This file was generated automatically by the Mojo IDE version B1.3.6.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module test_auto_clock_7 (
    input clk,
    input rst,
    output reg out,
    output reg carryOut,
    output reg sumOut,
    output reg p1,
    output reg p2,
    output reg p3,
    output reg [6:0] seg,
    output reg [3:0] sel,
    output reg [7:0] io_led,
    input input1,
    input input2
  );
  
  
  
  reg [27:0] M_counter_d, M_counter_q = 1'h0;
  wire [1-1:0] M_state_out;
  wire [1-1:0] M_state_carryOut;
  wire [1-1:0] M_state_sumOut;
  reg [1-1:0] M_state_inputA;
  reg [1-1:0] M_state_inputB;
  reg [1-1:0] M_state_carryin;
  test_fsm_refactor_6 state (
    .clk(clk),
    .rst(rst),
    .inputA(M_state_inputA),
    .inputB(M_state_inputB),
    .carryin(M_state_carryin),
    .out(M_state_out),
    .carryOut(M_state_carryOut),
    .sumOut(M_state_sumOut)
  );
  wire [7-1:0] M_segdisplay_seg;
  wire [4-1:0] M_segdisplay_sel;
  reg [16-1:0] M_segdisplay_values;
  multi_seven_seg_3 segdisplay (
    .clk(clk),
    .rst(rst),
    .values(M_segdisplay_values),
    .seg(M_segdisplay_seg),
    .sel(M_segdisplay_sel)
  );
  
  wire [1-1:0] M_inputTest_out;
  wire [1-1:0] M_inputTest_result;
  reg [1-1:0] M_inputTest_inputA1;
  reg [1-1:0] M_inputTest_inputA2;
  reg [1-1:0] M_inputTest_inputB1;
  reg [1-1:0] M_inputTest_inputB2;
  test_input_8 inputTest (
    .inputA1(M_inputTest_inputA1),
    .inputA2(M_inputTest_inputA2),
    .inputB1(M_inputTest_inputB1),
    .inputB2(M_inputTest_inputB2),
    .out(M_inputTest_out),
    .result(M_inputTest_result)
  );
  
  integer temp;
  
  always @* begin
    M_counter_d = M_counter_q;
    
    out = 1'h0;
    io_led = 8'h00;
    M_counter_d = M_counter_q + 1'h1;
    M_state_inputA = M_counter_q[27+0-:1];
    M_state_inputB = M_counter_q[26+0-:1];
    M_state_carryin = M_counter_q[25+0-:1];
    p1 = M_counter_q[27+0-:1];
    p2 = M_counter_q[26+0-:1];
    p3 = M_counter_q[25+0-:1];
    carryOut = M_state_carryOut;
    sumOut = M_state_sumOut;
    M_segdisplay_values = {{3'h0, M_counter_q[27+0-:1]}, {3'h0, M_counter_q[26+0-:1]}, {3'h0, M_counter_q[25+0-:1]}, 4'hf};
    sel = M_segdisplay_sel;
    seg = M_segdisplay_seg;
    temp = {M_counter_q[27+0-:1], M_counter_q[26+0-:1], M_counter_q[25+0-:1]};
    M_inputTest_inputB1 = input1;
    M_inputTest_inputA1 = input2;
    M_inputTest_inputA2 = M_state_sumOut;
    M_inputTest_inputB2 = M_state_carryOut;
    if (M_inputTest_result) begin
      if (temp == 3'h0) begin
        io_led[7+0-:1] = 1'h1;
      end else begin
        if (temp == 3'h1) begin
          io_led[6+0-:1] = 1'h1;
        end else begin
          if (temp == 3'h2) begin
            io_led[5+0-:1] = 1'h1;
          end else begin
            if (temp == 3'h3) begin
              io_led[4+0-:1] = 1'h1;
            end else begin
              if (temp == 3'h4) begin
                io_led[3+0-:1] = 1'h1;
              end else begin
                if (temp == 3'h5) begin
                  io_led[2+0-:1] = 1'h1;
                end else begin
                  if (temp == 3'h6) begin
                    io_led[1+0-:1] = 1'h1;
                  end else begin
                    if (temp == 3'h7) begin
                      io_led[0+0-:1] = 1'h1;
                    end
                  end
                end
              end
            end
          end
        end
      end
    end
  end
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_counter_q <= 1'h0;
    end else begin
      M_counter_q <= M_counter_d;
    end
  end
  
endmodule
