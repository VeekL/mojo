module test_fsm_refactor (
    input clk,  // clock
    input rst,  // reset
    output out,
    input inputA,
    input inputB,
    input carryin,
    output carryOut,
    output sumOut
  ) {
  fsm state(.clk(clk), .rst(rst)) = {NOCARRY, CARRY};
  var sum;
  var nextState;

  always {
    out = 0;
    if(carryin){
      state.d = state.CARRY;
      nextState = 1;
      }
    else {
      state.d = state.NOCARRY;
      nextState = 0;
    }
      
    case (state.q) {
      state.NOCARRY:
        if(inputA ^ inputB)
          sum = 1;
        else if(inputA & inputB){
          nextState = 1;
          sum = 0;
        }
        else{
          sum = 0;
        }
      state.CARRY:
        if(inputA ^ inputB)
          sum = 0;
        else if (inputA & inputB){
          sum = 1;
        }
        else{ 
          nextState = 0;
          sum = 1;
        }
    }
    carryOut = 0;
    if(nextState == 1){
      carryOut = 1;
      }   
    sumOut = sum;
  }
}
